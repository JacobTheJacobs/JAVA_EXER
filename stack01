
1 .כתוב פונקציה חיצונית המקבלת כפרמטר מחסנית של מספרים שלמים. על
הפונקציה להחזיר את המחסנית החדשה שהיא העתק של המחסנית שהתקבלה
כפרמטר. אין לשנות את המחסנית המקורית.
2 .כתוב פונקציה חיצונית המקבלת כפרמטר מחסנית של תווים. על הפונקציה להחזיר
מחסנית החדשה שמכילה את אותם תווים כמו במחסנית שהתקבלה כפרמטר אך
בסדר הפוך. אין לשנות את המחסנית המקורית.
3 .כתוב פונקציה חיצונית המקבלת כפרמטר מחסנית של מספרים ממשיים. פונקציה
מחזירה true אם מספרים במחסנית מסודרים בסדר עולה )הנתון הקטן ביותר
נמצא בראש המחסנית( ו- false אחרת.
4 .כתוב פונקציה חיצונית המקבלת כפרמטר מחסנית לא ריקה של מספרים שלמים.
על הפונקציה להעביר את האיבר שבראש המחסנית לתחתית המחסנית.
5 .כתוב פונקציה חיצונית המקבלת כפרמטר מחסנית לא ריקה של מספרים שלמים.
על הפונקציה להעביר את האיבר שבתחתית המחסנית לראש המחסנית.
6 .כתוב פונקציה חיצונית בוליאנית המקבלת כפרמטר שתי מחסניות של מחרוזות.
פונקציה מחזירה true אם שתי המחסניות זהות ו- false אחרת.

----------------------------------------------------------------------------------------------------------------------
package stack;

import unit4.collectionsLib.Stack;

public class main {
	
	public static Stack<Integer> targil01(Stack<Integer> s){
		Stack<Integer> s2 = new Stack<Integer>();
		Stack<Integer> s3 = new Stack<Integer>();
		
		while(!s.isEmpty()) {
			s2.push(s.pop());
		}
		while(!s2.isEmpty()) {
			s3.push(s2.pop());
		}
		return s3;
	}
	
	public static Stack<Character> targil02(Stack<Character> s){
		Stack<Character> s2 = new Stack<Character>();
		Stack<Character> s3 = s;
		
		while(!s3.isEmpty()) {
			s2.push(s.pop());
		}
		return s2;
	}
	
	public static boolean targil03(Stack<Double> s){
		boolean res =false;
		double top_num=s.top();
		s.pop();
		
		while(!s.isEmpty()) {
			if(s.top()>top_num) {
				top_num=s.top();
				res= true;
			}else {
				res= false;
				break;
			}
		}
		return res;
	}
	
	public static Stack<Integer> targil04(Stack<Integer> s){
		Stack<Integer> s1 = new Stack<Integer>();
		Stack<Integer> s2 = new Stack<Integer>();
		
		int topNum = s.top();
		s.pop();
		boolean pushFirst =true;
		while(!s.isEmpty()) {
			s1.push(s.pop());
		}
		
		while(!s1.isEmpty()) {
			if(pushFirst) {
				pushFirst=false;
				s2.push(topNum);
			}
			s2.push(s1.pop());
		}
		return s2;
	}
	
	
	public static Stack<Integer> targil05(Stack<Integer> s){
		Stack<Integer> s1 = new Stack<Integer>();
		Stack<Integer> s2 = new Stack<Integer>();
		
		while(!s.isEmpty()) {
			s1.push(s.pop());
		}
		int topNum = s1.top();
		s1.pop();	
		while(!s1.isEmpty()) {
			s2.push(s1.pop());
		}
		s2.push(topNum);
		
		return s2;
	}
	
	public static boolean targil06(Stack<Integer> s,Stack<Integer> s1){
		
		boolean res= true;
		while(!s.isEmpty() && !s1.isEmpty()) {
			if(s.top()==s1.top()) {
				s.pop();
				s1.pop();
			}else {
				res =false;
				break;
			}
		}
		return res;
	}

	public static void main (String[]args) {
		
		Stack<Integer> s = new Stack<Integer>();
		Stack<Character> s1 = new Stack<Character>();
		Stack<Double> s2 = new Stack<Double>();
		Stack<Integer> s3 = new Stack<Integer>();
		

		s3.push(3);
		s3.push(5);
		s3.push(4);
		s3.push(3);
		s3.push(6);
		s3.push(10);

		s.push(3);
		s.push(5);
		s.push(4);
		s.push(3);
		s.push(2);
		s.push(10);
	
		System.out.println(s3);
		//System.out.println(targil01(s));
		//System.out.println(targil02(s1));
		System.out.println(targil06(s3,s));
	}
	
	
}
